---
import type { PicoBreak } from "../data/pico-breaks";
import { picoBreaks } from "../data/pico-breaks";

const categories = [...new Set(picoBreaks.map((task) => task.category))];
const sortOptions = ["title", "category"];

// Get query parameters for filtering and sorting
const filterCategory = Astro.url.searchParams.get("category") || "";
const sortKey = Astro.url.searchParams.get("sort") || "title";

const filteredTasks = picoBreaks
  .filter((task: PicoBreak) =>
    filterCategory ? task.category === filterCategory : true
  )
  .sort((a: PicoBreak, b: PicoBreak) => {
    const aValue = a[sortKey as keyof PicoBreak];
    const bValue = b[sortKey as keyof PicoBreak];
    if (typeof aValue === "string" && typeof bValue === "string") {
      return aValue.localeCompare(bValue);
    } else if (typeof aValue === "number" && typeof bValue === "number") {
      return aValue - bValue;
    }
    return 0;
  });
---

<div>
  <!-- Sorting and Filtering Controls -->
  <div class="flex flex-col md:flex-row items-start md:items-center mb-6">
    <div class="mb-4 md:mb-0 md:mr-6">
      <label class="block text-sm font-medium text-gray-700 mb-1">
        Filter by Category:
      </label>
      <select
        id="categoryFilter"
        class="mt-1 block w-full md:w-auto pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
      >
        <option value="">All</option>
        {
          categories.map((category) => (
            <option value={category} selected={filterCategory === category}>
              {category}
            </option>
          ))
        }
      </select>
    </div>

    <div>
      <label class="block text-sm font-medium text-gray-700 mb-1">
        Sort by:
      </label>
      <select
        id="sortKey"
        class="mt-1 block w-full md:w-auto pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
      >
        {
          sortOptions.map((option) => (
            <option value={option} selected={sortKey === option}>
              {option.charAt(0).toUpperCase() + option.slice(1)}
            </option>
          ))
        }
      </select>
    </div>
  </div>

  <!-- Task List -->
  <ul
    id="taskList"
    class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
  >
    {
      filteredTasks.map((task) => (
        <li class="bg-white rounded-lg shadow p-6">
          <h2 class="text-xl font-semibold text-gray-800 mb-2">{task.title}</h2>
          <p class="text-gray-600 mb-4">{task.description}</p>
          <span class="inline-block bg-blue-100 text-blue-800 text-xs font-semibold px-2 py-1 rounded">
            {task.category}
          </span>
        </li>
      ))
    }
  </ul>

  <!-- Include the client-side interactivity script -->
  <script define:vars={{ picoBreaks }}>
    const tasks = picoBreaks;
    const taskList = document.getElementById("taskList");
    const categoryFilter = document.getElementById("categoryFilter");
    const sortKeySelect = document.getElementById("sortKey");

    function renderTasks() {
      const filterCategory = categoryFilter.value;
      const sortKey = sortKeySelect.value;

      let filteredTasks = tasks
        .filter((task) =>
          filterCategory ? task.category === filterCategory : true
        )
        .sort((a, b) => a[sortKey].localeCompare(b[sortKey]));

      taskList.innerHTML = filteredTasks
        .map(
          (task) => `
        <li class="bg-white rounded-lg shadow p-6">
          <h2 class="text-xl font-semibold text-gray-800 mb-2">${task.title}</h2>
          <p class="text-gray-600 mb-4">${task.description}</p>
          <span class="inline-block bg-blue-100 text-blue-800 text-xs font-semibold px-2 py-1 rounded">
            ${task.category}
          </span>
        </li>
      `
        )
        .join("");
    }

    categoryFilter.addEventListener("change", renderTasks);
    sortKeySelect.addEventListener("change", renderTasks);
  </script>
</div>
